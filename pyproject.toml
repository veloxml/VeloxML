[build-system]
requires = ["scikit-build-core", "pybind11", "cmake", "ninja"]
build-backend = "scikit_build_core.build"

[tool.cmake]
args = ["-DBUILD_TESTS=OFF", "-DBUILD_GMOCK=OFF", "-DINSTALL_GTEST=OFF"]

[tool.mypy]
files = "setup.py"
strict = true
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true

[[tool.mypy.overrides]]
module = ["ninja"]
ignore_missing_imports = true

[project]
name = "veloxml"  # あなたのプロジェクト名
version = "0.0.1"
description = "High-Performance Machine Learning Library for Python (Powered by C++)"
authors = [
    { name = "Yuji Chinen", email = "veloxml1113@gmail.com" }
]
license = { file = "LICENSE" }
readme = "README.md"
dependencies = [
    "numpy",
    "pybind11",
] 
keywords = ["veloxml", "machine-learning", "high-performance", "python", "cpp"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License"
]

[project.optional-dependencies]
dev = [
    "pytest",
    "sphinx"
]

[project.urls]
Homepage = "https://github.com/veloxml/VeloxML"
Documentation = "https://veloxml.github.io/VeloxML/"
Repository = "https://github.com/veloxml/VeloxML"
Issues = "https://github.com/veloxml/VeloxML/issues"

[tool.setuptools.packages.find]
where = ["."]  # ここを変更（ディレクトリを明示的に設定）
include = ["veloxml*"]  # サブパッケージも含める

[tool.setuptools.package-data]
veloxml = ["core/*.so", "**/*.py"]  # .soファイルを含める

[tool.setuptools.exclude-package-data]
veloxml = ["core/include/gtest/*", "core/lib/gtest*", "**/*.cpp", "**/*.hpp"]

[tool.cibuildwheel]
#test-requires = "pytest"
#test-command = "pytest {package}/tests"

[tool.cibuildwheel.linux]
build = "cp39-manylinux* cp310-manylinux* cp311-manylinux* cp312-manylinux*"
archs = "auto64"
before-build = """
    if [ \"$(uname -m)\" = \"x86_64\" ]; then
        python -m ensurepip --upgrade && pip install scikit-build ninja cmake pybind11 tbb-devel
    else
        python -m ensurepip --upgrade && pip install scikit-build ninja cmake pybind11 && find /usr/local/tbb/ -type f -name "libtbb.so.12"
    fi
"""

environment = "PATH=$PATH:/usr/local/bin CMAKE_INCLUDE_PATH=/usr/include/openblas:$CMAKE_INCLUDE_PATH"

manylinux-x86_64-image =  "veloxml/for-build-linux-x86_64:latest"
manylinux-aarch64-image = "veloxml/for-build-linux-aarch64:latest"

repair-wheel-command = """ 
    if [ \"$(uname -m)\" = \"x86_64\" ]; then 
        LD_LIBRARY_PATH=$(find /opt/_internal/ -type f -name "libtbb.so.12" | sort -V | tail -n 1 | xargs -I {} dirname {}) \
        auditwheel repair --plat manylinux_2_28_$(uname -m) -w {dest_dir} {wheel}
    else 
        LD_LIBRARY_PATH=/usr/local/tbb/lib64/ \
        auditwheel repair --plat manylinux_2_34_$(uname -m) -w {dest_dir} {wheel}
    fi
"""

[tool.cibuildwheel.macos]
build = "cp39* cp310* cp311* cp312* cp313*"
repair-wheel-command = "delocate-wheel --exclude libgomp.1.dylib --exclude libgcc_s.1.1.dylib -w {dest_dir} {wheel}"

[tool.cibuildwheel.windows]
before-build =  "python -m ensurepip --upgrade && pip install scikit-build ninja cmake pybind11 tbb-devel"
environment = """
    CMAKE_C_COMPILER=D:/a/_temp/msys64/mingw64/bin/gcc.exe \
    CMAKE_CXX_COMPILER=D:/a/_temp/msys64/mingw64/bin/g++.exe \
    CMAKE_INCLUDE_PATH=D:/a/_temp/msys64/mingw64/include: \
    CMAKE_LIBRARY_PATH=D:/a/_temp/msys64/mingw64/lib: \
    TBB_DIR=D:/a/_temp/msys64/mingw64/
"""
