name: Release Build

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write  # ← リリースを作成・更新するための権限を追加
  id-token: write  # ← OIDC を使用する場合に必要

jobs:
  build:
    name: Build & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # os: [ubuntu-latest, macos-13, macos-14, windows-latest]
        os: [ubuntu-latest]
        build_type: ["Release"]
        c_compiler: ["gcc"]
        cxx_compiler: ["g++"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          pip install -U build scikit-build ninja pytest cibuildwheel

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install ninja cmake gcc tbb libomp openblas
          GCC_PATH=$(brew --prefix gcc)/bin/gcc-13
          GXX_PATH=$(brew --prefix gcc)/bin/g++-13
          PKG_CONFIG_PATH="/opt/homebrew/opt/openblas/lib/pkgconfig"
          echo "CC=${GCC_PATH}" >> $GITHUB_ENV
          echo "CXX=${GXX_PATH}" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=${PKG_CONFIG_PATH}" >> $GITHUB_ENV
          echo "Using GCC: $GCC_PATH"
          echo "Using G++: $GXX_PATH"
          TBB_PREFIX=$(brew --prefix tbb)
          PKG_CONFIG_PATH="/opt/homebrew/opt/openblas/lib/pkgconfig"
          echo "TBB_DIR=${TBB_PREFIX}/lib/cmake/tbb" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=${PKG_CONFIG_PATH}" >> $GITHUB_ENV
          pip install -U build scikit-build ninja pytest cibuildwheel

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install mingw ninja cmake tbb 
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.bat
          ./vcpkg install tbb:x64-windows
          ./vcpkg integrate install
          echo "CC=$(where gcc)" >> $GITHUB_ENV
          echo "CXX=$(where g++)" >> $GITHUB_ENV
          echo "VCPKG_ROOT=${{ github.workspace }}/vcpkg" >> $GITHUB_ENV
          echo "TBB_DIR=${{ github.workspace }}/vcpkg/installed/x64-windows/share/tbb" >> $GITHUB_ENV
          pip install -U build scikit-build ninja pytest cibuildwheel

      - name: Build Python Wheels (macOS Apple Silicon)
        if: runner.os == 'macOS' && runner.arch == 'ARM64'
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          TBB_DIR: ${{ env.TBB_DIR }}
          CMAKE_ARGS: "-DTBB_DIR=${{ env.TBB_DIR }} -DCMAKE_PREFIX_PATH=${{ env.TBB_DIR }}"
          CIBW_BUILD: "cp39-macosx_arm64 cp310-macosx_arm64 cp311-macosx_arm64 cp312-macosx_arm64 cp313-macosx_arm64"
          MACOSX_DEPLOYMENT_TARGET: "14.0"

      - name: Build Python Wheels (macOS Intel)
        if: runner.os == 'macOS' && runner.arch == 'x64'
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          TBB_DIR: ${{ env.TBB_DIR }}
          CMAKE_ARGS: "-DTBB_DIR=${{ env.TBB_DIR }} -DCMAKE_PREFIX_PATH=${{ env.TBB_DIR }}"
          CIBW_BUILD: "cp39-macosx_arm64 cp310-macosx_arm64 cp311-macosx_arm64 cp312-macosx_arm64 cp313-macosx_arm64"
          MACOSX_DEPLOYMENT_TARGET: "13.0"

      - name: Build Python Wheels (Linux x86_64)
        if: runner.os == 'Linux' && runner.arch == 'x64'
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: "cp39-manylinux_x86_64 cp310-manylinux_x86_64 cp311-manylinux_x86_64 cp312-manylinux_x86_64 cp313-manylinux_x86_64"

      - name: Build Python Wheels (Linux aarch64)
        if: runner.os == 'Linux' && runner.arch == 'arm64'
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: "cp39-manylinux_aarch64 cp310-manylinux_aarch64 cp311-manylinux_aarch64 cp312-manylinux_aarch64 cp313-manylinux_aarch64"

      - name: Build Python Wheels (Windows amd64)
        if: runner.os == 'Windows' && runner.arch == 'amd64'
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          TBB_DIR: ${{ env.TBB_DIR }}
          CMAKE_ARGS: "-DTBB_DIR=${{ env.TBB_DIR }} -DCMAKE_PREFIX_PATH=${{ env.TBB_DIR }}"
          CIBW_BUILD: "cp39-win_amd64 cp310-win_amd64 cp311-win_amd64 cp312-win_amd64 cp313-win_amd64"

      - name: Build Python Wheels (Windows arm64)
        if: runner.os == 'Windows' && runner.arch == 'arm64'
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          TBB_DIR: ${{ env.TBB_DIR }}
          CMAKE_ARGS: "-DTBB_DIR=${{ env.TBB_DIR }} -DCMAKE_PREFIX_PATH=${{ env.TBB_DIR }}"
          CIBW_BUILD: "cp39-win_arm64 cp310-win_arm64 cp311-win_arm64 cp312-win_arm64 cp313-win_arm64"

      - name: Build Source Distribution (sdist)
        run: python -m build --sdist --outdir wheelhouse

      - name: Upload Wheels
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels
          path: wheelhouse/*

  release:
    name: Publish to GitHub Releases
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-wheels
          path: wheelhouse/

      - name: Set up GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ github.ref_name }}" wheelhouse/* \
            --title "Release ${{ github.ref_name }}" \
            --notes "Alpha release."

  publish-pypi:
    name: Publish to PyPI
    needs: release
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/veloxml
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-wheels
          path: wheelhouse/

      - name: Copy to dist
        run: |
          mkdir -p dist
          cp wheelhouse/* dist/

      - name: Publish distribution 📦 to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
