name: Release Build

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build:
    name: Build & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: ["Release"]
        c_compiler: ["gcc"]
        cxx_compiler: ["g++"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y ninja-build cmake g++ gcc libtbb-dev libomp-dev
          echo "CC=$(which gcc)" >> $GITHUB_ENV
          echo "CXX=$(which g++)" >> $GITHUB_ENV
          pip install -U build scikit-build ninja pytest cibuildwheel

      - name: Check and Set TBB Environment Variables (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "Checking installed TBB packages..."
          dpkg -l | grep tbb || true
          
          echo "Searching for TBBConfig.cmake..."
          TBB_CONFIG_PATH=$(find /usr -name "TBBConfig.cmake" 2>/dev/null | head -n 1)
          
          if [[ -n "$TBB_CONFIG_PATH" ]]; then
            TBB_DIR=$(dirname "$TBB_CONFIG_PATH")
            echo "Found TBBConfig.cmake at: $TBB_CONFIG_PATH"
            echo "Setting TBB_DIR to: $TBB_DIR"
            echo "TBB_DIR=$TBB_DIR" >> $GITHUB_ENV
            echo "CMAKE_PREFIX_PATH=$TBB_DIR:$CMAKE_PREFIX_PATH" >> $GITHUB_ENV
          else
            echo "TBBConfig.cmake not found! TBB might not be installed correctly."
            exit 1
          fi

          echo "Checking environment variables..."
          env | grep TBB || true

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install ninja cmake gcc tbb libomp openblas
          GCC_PATH=$(brew --prefix gcc)/bin/gcc-13
          GXX_PATH=$(brew --prefix gcc)/bin/g++-13
          echo "CC=${GCC_PATH}" >> $GITHUB_ENV
          echo "CXX=${GXX_PATH}" >> $GITHUB_ENV
          echo "Using GCC: $GCC_PATH"
          echo "Using G++: $GXX_PATH"
          TBB_PREFIX=$(brew --prefix tbb)
          echo "TBB_DIR=${TBB_PREFIX}/lib/cmake/tbb" >> $GITHUB_ENV
          pip install -U build scikit-build ninja pytest cibuildwheel

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install mingw ninja cmake tbb 
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.bat
          ./vcpkg install tbb:x64-windows
          ./vcpkg integrate install
          echo "CC=$(where gcc)" >> $GITHUB_ENV
          echo "CXX=$(where g++)" >> $GITHUB_ENV
          echo "VCPKG_ROOT=${{ github.workspace }}/vcpkg" >> $GITHUB_ENV
          echo "TBB_DIR=${{ github.workspace }}/vcpkg/installed/x64-windows/share/tbb" >> $GITHUB_ENV
          pip install -U build scikit-build ninja pytest cibuildwheel

      - name: Build Python Wheels
        run: cibuildwheel --output-dir wheelhouse
        env:
          TBB_DIR: ${{ env.TBB_DIR }}
          CMAKE_ARGS: "-DTBB_DIR=${{ env.TBB_DIR }} -DCMAKE_PREFIX_PATH=${{ env.TBB_DIR }}:${{ env.CMAKE_PREFIX_PATH }}"

      - name: Build Source Distribution (sdist)
        run: python -m build --sdist --outdir wheelhouse

      - name: Upload Wheels
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels
          path: wheelhouse/*

  release:
    name: Publish to GitHub Releases
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-artifacts
          path: wheelhouse/

      - name: Set up GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Create GitHub Release
        run: |
          gh release create "${{ github.ref_name }}" wheelhouse/* \
            --title "Release ${{ github.ref_name }}" \
            --notes "Auto-generated release."

  publish-pypi:
    name: Publish to PyPI
    needs: release
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/veloxml
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-wheels
          path: wheelhouse/

      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
